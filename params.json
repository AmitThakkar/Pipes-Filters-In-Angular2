{
  "name": "Pipes in Angular2",
  "tagline": "This blog explain Pipes in Angular2",
  "body": "# Pipes in Angular2\r\n\r\nThis blog explain Pipes in Angular2\r\n\r\nIn Angular2, **[Filters](http://namitamalik.github.io/Filters-in-AngularJS/)** are known as **Pipes**. \r\nThose who are not aware with **AngularJS**, **Pipes** transform the value in view, e.g.\r\n\r\n1. **Uppercase/Lowercase** **Pipe**:\r\n    ```HTML\r\n    My Name in toString Form : <strong> {{ name }} </strong><br/>\r\n    My Name in Uppercase : <strong> {{ name | uppercase }} </strong>\r\n    My Name in Lowercase : <strong> {{ name | lowercase }} </strong>\r\n    ```\r\n    \r\n    First line will print the name value as it is, but second line will print the name in the Upper Case\r\n    while third line will print the name in the Lower Case.\r\n    > Property `name` will not change, it would be as it is.\r\n\r\n2. **Date** **Pipe**:\r\n    ```HTML\r\n    My DOB in toString Form : <strong> {{ birthday }} </strong><br/>\r\n    My DOM in Readable Form : <strong> {{ birthday | date }} </strong><br/>\r\n    ```\r\n    \r\n    First line will print full date of birth in local time zone(will call toString() on Date), i.e. \r\n    `Sat Oct 01 1988 00:00:00 GMT+0530 (IST)`, but second line will print the birthday in more simple\r\n    format i.e. `Oct 1, 1988`.\r\n    \r\n    We can pass parameters to a pipe, e.g.\r\n    ```HTML\r\n    My DOM in Custom Form : <strong> {{ birthday | date : 'dd/MM/yyyy' }} </strong><br />\r\n    ```\r\n    In the above line we are providing the date format in which date should be displayed.\r\n    \r\n3. **JSON** **Pipe**:\r\n    ```HTML\r\n    Object without JSON Pipe : <strong> {{ userObject }} </strong><br/>\r\n    Object with JSON Pipe : <strong> {{ userObject | json }} </strong><br/><h3>Async Pipe:</h3>\r\n    ```\r\n    \r\n    First line will print `[object Object]`(userObject.toString() returns `[object Object]`), but second line will print\r\n    `{ \"name\": \"Amit Thakkar\", \"age\": 27 }`(JSON.stringify(userObject) return `{ \"name\": \"Amit Thakkar\", \"age\": 27 }`). \r\n    So **json** **pipe** will display object in **json**/readable form.\r\n    \r\n4. **Async** **Pipe**\r\n    ```HTML\r\n    Async Value without Pipe : <strong> {{ age }} </strong><br/>\r\n    Async Object without async Pipe : <strong> {{ asyncValue$ }} </strong><br/>\r\n    Async Object with async Pipe : <strong> {{ asyncValue$ | async }} </strong><br/>\r\n    ```\r\n    \r\n    First line is having a value, which gets initialized asynchronously, and prints the value on view whenever gets initialized.\r\n    while in the second line we have **promise** / **observable** which prints `[object Object]` instead of value while on third line\r\n    we are using **async** **pipe** so it will print value whenever **promise** / **observable** gets resolved.\r\n\r\nWe can chain multiple **Pipes** one after one. So output of one **pipe** will be input for second **pipe** and so on. Output of \r\nlast **pipe** will be displayed on view e.g.\r\n\r\n```HTML\r\nChaining Pipe result : <strong> {{ birthday | date : 'MMM dd, yyyy' | uppercase }} </strong>\r\n```\r\n\r\n#### Custom Pipes\r\n\r\nWe can create **Custom** **Pipes** in **Angular2**, although **Angular2** has provided all basic **Pipes** e.g. **Uppercase**, \r\n**Lowercase**, **Date**, **JSON**, **Async** etc. But sometimes we have to create **custom** **pipes** e.g. **range** **pipe**:\r\n\r\n```HTML\r\n| <span *ngFor=\"let value of (1 | range : 10)\">{{value}} | </span>\r\n```\r\nHere we are repeating the span 10 times, **range** **pipe** will create the array of values from 1(min value) to 10(max value), \r\nand **\\*ngFor** will repeat the span 10 times with value 1 to 10.\r\n\r\nLets see the **Range** **Pipe** code:\r\n```TypeScript\r\nimport {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({name: 'range'})\r\nexport class RangePipe implements PipeTransform {\r\n    transform(minValue:number, maxValue:number):number[] {\r\n        let range = [];\r\n        for (let index = minValue; index <= maxValue; index++) {\r\n            range.push(index);\r\n        }\r\n        return range;\r\n    }\r\n}\r\n```\r\n\r\nSo you can see in the above code, implementing the **custom** **pipe** in **angular2** is quite easy.\r\n\r\n1. Import the **Pipe** and **PipeTransform** class from `@angular/code`.\r\n2. Provide **Pipe** name in `@Pipe` annotation.\r\n3. Implement **transform** method of **PipeTransform**.\r\n\r\n> transform method will contain all the logic for transforming the input.\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/AmitThakkar)\r\n\r\n[Twitter](https://twitter.com/amit_thakkar01)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/amitthakkar01)\r\n\r\n[More Blogs By Me](http://amitthakkar.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}